/*
 Copyright (c) 2007-2011 iMatix Corporation
 Copyright (c) 2007-2011 Other contributors as noted in the AUTHORS file

 This file is part of 0MQ.

 0MQ is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation; either version 3 of the License, or
 (at your option) any later version.

 0MQ is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __SHARED_NET_CTX_H__
#define __SHARED_NET_CTX_H__

#include <map>
#include <vector>
#include <string>
#include <stdarg.h>
#include <stdint.h>

#include "Mailbox.h"
#include "Mutex.h"
#include "Thread.h"

namespace NET
{

//  Context object encapsulates all the global state associated with
//  the library.

class Ctx
{
public:

	//  Create the context object. The argument specifies the size
	//  of I/O thread pool to create.
	Ctx(uint32_t io_threads);

	//  Returns false if object is not a context.
	bool CheckTag();

	//  This function is called when user invokes zmq_term. If there are
	//  no more sockets open it'll cause all the infrastructure to be shut
	//  down. If there are open sockets still, the deallocation happens
	//  after the last one is closed.
	int Terminate();

	//  Send command to the destination thread.
	void SendCommand(uint32_t tid, const Command& command);

	//  Returns the I/O thread that is the least busy at the moment.
	//  Affinity specifies which I/O threads are eligible (0 = all).
	//  Returns NULL is no I/O thread is available.
	class IOThread* ChooseIOThread(uint64_t affinity);

	enum
	{
		term_tid = 0,
	};

	~Ctx();
private:

	//  Used to check whether the object is a context.
	uint32_t tag_;

	//  If true, zmq_term was already called.
	bool terminating_;

	//  Array of pointers to mailboxes for both application and I/O threads.
	uint32_t slot_count_;
	Mailbox **slots_;

	//  I/O threads.
	typedef std::vector<class IOThread*> io_threads_t;
	io_threads_t io_threads_;

	typedef std::vector<uint32_t> emtpy_slots_t;
	emtpy_slots_t empty_slots_;

	//  Mailbox for zmq_term thread.
	Mailbox term_mailbox_;

	Ctx(const Ctx&);
	const Ctx& operator=(const Ctx&);
};

}

#endif

