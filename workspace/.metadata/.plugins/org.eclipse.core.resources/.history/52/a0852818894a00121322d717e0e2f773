/*
 * ByteBuffer.cpp
 *
 *  Created on: 2012-12-19
 *      Author: cent
 */

#include "ByteBuffer.h"

#include <assert.h>
#include <string>
#include <exception>
#include <cstring>
#include <malloc.h>
#include <new>

ByteBuffer::ByteBuffer(const char* const data, size_t size)
{
	this->buf_size_ = size;

	if (this->buf_size_ > 0)
	{
		this->buf_ = (char*) data;
	}
	else
	{
		this->buf_ = NULL;
	}

	this->rd_pos_ = 0;
	this->wr_pos_ = 0;
}

ByteBuffer::ByteBuffer(size_t buf_size)
{
	this->buf_size_ = buf_size;

	if (this->buf_size_ > 0)
	{
		this->buf_ = (char *) malloc(this->buf_size_);

		if (this->buf_ == NULL)
		{
			throw std::bad_alloc();
		}
	}
	else
	{
		data_ = NULL;
	}

	this->rd_pos_ = 0;
	this->wr_pos_ = 0;
}

ByteBuffer::~ByteBuffer()
{
	Kill();
}

void ByteBuffer::Kill(void)
{
	if (this->buf_)
	{
		free(this->buf_);
		this->buf_ = NULL;
	}
}

char* ByteBuffer::Buf(void)
{
	return this->buf_;
}

const char* ByteBuffer::Buf(void) const
{
	return this->buf_;
}

int ByteBuffer::Length(void)
{
	return this->wr_pos_ - this->rd_pos_;
}

void ByteBuffer::Length(int length)
{
	this->wr_pos_ = this->rd_pos_ + length;
}

int ByteBuffer::Size(void) const
{
	return this->buf_size_;
}

ACE_Message_Block::length (void) const
{
  ACE_TRACE ("ACE_Message_Block::length");
  return this->wr_ptr_ - this->rd_ptr_;
}

// Sets the length of the "active" portion of the message.  This is
// defined as the offset from RD_PTR to WR_PTR.

ACE_INLINE void
ACE_Message_Block::length (size_t len)
{
  ACE_TRACE ("ACE_Message_Block::length");
  this->wr_ptr_ = this->rd_ptr_ + len;
}
