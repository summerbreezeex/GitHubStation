/*
    Copyright (c) 2007-2011 iMatix Corporation
    Copyright (c) 2007-2011 Other contributors as noted in the AUTHORS file

    This file is part of 0MQ.

    0MQ is free software; you can redistribute it and/or modify it under
    the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    0MQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


#include <new>
#include <string.h>
#include <unistd.h>

#include "Ctx.h"



NET::Ctx::Ctx (uint32_t io_threads) :
    tag_(0xbadcafe0),
    terminating_(false)
{

}

bool NET::Ctx::CheckTag ()
{
    return tag_ == 0xbadcafe0;
}

NET::Ctx::~Ctx ()
{
    //  Remove the tag, so that the object is considered dead.
    tag_ = 0xdeadbeef;
}

int NET::Ctx::Terminate ()
{
    return 0;
}

void NET::Ctx::SendCommand (uint32_t tid, const Command& command)
{
    slots [tid_]->send (command);
}

NET::io_thread_t *NET::Ctx::ChooseIOThread (uint64_t affinity)
{
    if (io_threads.empty ())
        return NULL;

    //  Find the I/O thread with minimum load.
    int min_load = -1;
    io_threads_t::size_type result = 0;
    for (io_threads_t::size_type i = 0; i != io_threads.size (); i++) {
        if (!affinity_ || (affinity_ & (uint64_t (1) << i))) {
            int load = io_threads [i]->get_load ();
            if (min_load == -1 || load < min_load) {
                min_load = load;
                result = i;
            }
        }
    }
    NET_assert (min_load != -1);
    return io_threads [result];
}



