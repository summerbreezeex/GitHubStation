#ifndef __SHARED_SERIALIZATION_BYTEBUFFER_H__
#define __SHARED_SERIALIZATION_BYTEBUFFER_H__

#include <stdint.h>
#include <stddef.h>
#include <string.h>

#include <string>
#include <vector>
#include <map>


class ByteBuffer
{

public:
	ByteBuffer(const unsigned char* const data, size_t size);
	ByteBuffer(size_t buf_size = 512);
	~ByteBuffer();

public:
	void Kill(void);

	unsigned char* Buf(void);
	const unsigned char* Buf(void) const;

	void Length(int length);

	//返回当前的数据长度
	size_t Length(void);

	//获取剩余可用空间大小
	size_t Space(void);

	//获取数据存储空间大小
	size_t Size(void);

	//从当前有效缓冲区的内存起始地址删除指定长度bytes字节数据
	char* Drain(size_t bytes);

public:
	ByteBuffer& operator <<(int8_t value);
	ByteBuffer& operator <<(int16_t value);
	ByteBuffer& operator <<(int32_t value);
	ByteBuffer& operator <<(int64_t value);

	ByteBuffer& operator <<(uint8_t value);
	ByteBuffer& operator <<(uint16_t value);
	ByteBuffer& operator <<(uint32_t value);
	ByteBuffer& operator <<(uint64_t value);

	ByteBuffer& operator <<(float value);
	ByteBuffer& operator <<(double value);

	ByteBuffer& operator <<(bool value);

	ByteBuffer& operator <<(const std::string& text)
	{
		uint16_t string_len = text.size();
		this->operator <<(string_len);
		memcpy(Grow(string_len), text.c_str(), string_len);
		return *this;
	}

	template<typename element>
	ByteBuffer& operator <<(const std::vector<element>& vec)
	{
		uint32_t count = vec.size();
		this->operator <<(count);

/*		for (std::vector<element>::const_iterator ite = vec.begin();
				ite != vec.end();
				++ite)
		{
			*this << *ite;
		}*/
		return *this;
	}

	template<typename T>
	ByteBuffer& Append(T* t, size_t size)
	{
		memcpy(Grow(size), (char*) t, size);
		return *this;
	}

private:
	void Align(void);
	unsigned char* Grow(size_t bytes);
	void Expand(size_t bytes);

	template<typename T>
	ByteBuffer& Append(const T& t)
	{
		*((T*) Grow(sizeof(T))) = t;
		return *this;
	}

protected:
	unsigned char *buf_; //整个分配(realloc)用来缓冲的内存起始地址
	size_t buf_size_; //整个分配用来缓冲的内存字节数

	size_t rd_pos_;
	size_t wr_pos_;

private:
	ByteBuffer(const ByteBuffer&);
	const ByteBuffer &operator =(const ByteBuffer&);
};

#endif
