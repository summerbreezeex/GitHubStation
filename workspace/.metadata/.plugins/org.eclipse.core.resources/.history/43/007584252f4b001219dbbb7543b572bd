#ifndef __SHARED_SERIALIZATION_BYTEBUFFER_H__
#define __SHARED_SERIALIZATION_BYTEBUFFER_H__

#include <stdint.h>

class ByteBuffer
{

public:
	ByteBuffer(const char* const data, size_t size);
	ByteBuffer(size_t buf_size = 512);
	~ByteBuffer();

public:
	void Kill(void);

	unsigned char* Buf(void);
	const unsigned char* Buf(void) const;

	void Length(int length);

	//返回当前的数据长度
	size_t Length(void);

	//获取剩余可用空间大小
	size_t Space(void);

	//获取数据存储空间大小
	size_t Size(void);

public:
	//从当前有效缓冲区的内存起始地址删除指定长度bytes字节数据
	char* Drain(size_t bytes);

	PackPacket& operator <<(int8_t value);
	PackPacket& operator <<(int16_t value);
	PackPacket& operator <<(int32_t value);
	PackPacket& operator <<(int64_t value);

	PackPacket& operator <<(uint8_t value);
	PackPacket& operator <<(uint16_t value);
	PackPacket& operator <<(uint32_t value);
	PackPacket& operator <<(uint64_t value);

	PackPacket& operator <<(float value);
	PackPacket& operator <<(double value);

	PackPacket& operator <<(bool value);

	PackPacket& operator <<(const std::string& text)
	{
		size_t size = text.size() + 1;
		std::memcpy(Grow(size), text.c_str(), size);
		return *this;
	}

	template<typename element>
	PackPacket& operator <<(const std::vector<element>& vec)
	{
		//size_t size = vec.size()* sizeof(element);

		uint32_t count = vec.size();
		this->operator <<(count);

		for (std::vector<element>::const_iterator ite = vec.begin(); ite
				!= vec.end(); ite++)
		{
			*this << *ite;
		}

		return *this;
	}
	;

	template<typename T>
	PackPacket& Append(T* t, size_t size)
	{
		std::memcpy(Grow(size), (char*) t, size);
		return *this;
	}
	;

private:
	void Align(void);
	char* Grow(size_t bytes);
	void Expand(size_t bytes);

	template<typename T>
	PackPacket& Append(const T& t)
	{
		*((T*) Grow(sizeof(T))) = t;
		return *this;
	}
	;

protected:
	unsigned char *buf_; //整个分配(realloc)用来缓冲的内存起始地址
	size_t buf_size_; //整个分配用来缓冲的内存字节数

	size_t rd_pos_;
	size_t wr_pos_;

private:
	ByteBuffer(const ByteBuffer&);
	const ByteBuffer &operator =(const ByteBuffer&);
};

#endif
